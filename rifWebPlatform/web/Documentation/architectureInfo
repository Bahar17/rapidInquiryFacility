--Introduction

The RIF 4.0 Javascript User Interface has been designed to allow its different  components to be completely decoupled from one another. To do this a hybrid mixture between a  Mediator and Observer pattern has been used within the RIF code's architecture.

In practice the Graphical components notify a Mediator Object when a registered event occurs, this is able to propagate it to other components that have subscribed to the specific event as well as to modify a Model object which stores the entire application's business domain. 

--Initialize File

Events and their subscriptions can be set in the initialize.js file, this is also used to define and initialize the set of components and  sub components needed in the application.
For instance looking at the following diseaseSubmission initializie file: https://github.com/smallAreaHealthStatisticsUnit/rapidInquiryFacility/blob/master/rifWebPlatform/web/dashboards/diseaseSubmission/js/v2/initialize.js 
We can gather that the application uses the following  components :
Mediator - which has no grpahical sub componts
Map - With 2 sub componets called studyArea and ComparisonArea
Menu - With a list of sub components which includes 'frontSubmission',  'investigationParameters', 'healthCodes' etc..
Table - 'ageGroups', 'investigationsRecap', 'studyArea', 'comparisonArea', 'summary'

A component then can be thought as a collection of units (or sub components) that may share  functionalities between one another and area able to communicate to the Mediator object.


--Events

An event within the initialiaze file can be  added by introducing a new object within the events object.
For example examine the following: 
     studyNameChanged: {
        subscribers: ["mediator"],
        firer: ["menu"],
        method: "studyNameChanged"
      },
The literal object above tells the RIF that a new event called studyNameChanged should be registed within its internal event's register, the "firer" property define which component will be firing/propagating the specific event, (we do not have to specify which sub components will actually do this), the "subscribers"  property on the other hand set the component name which will listen for the event change/propagation, in this case as in most cases the Mediator is responsible to subscribe to events coming from User interaction with the Interface.   

--Components
There are 4 graphical components:

  1. Menu
  2. Table
  3. Map
  4. Charts
  5. Mediator - A unique abstract type of components which has no subcomponents  
  
Please note that some dashboard may not use all the components, i.e the diseaseSubmission does not make use of charts.


--Sub components
As we saw earlier each components is made of multiple sub components, each sub component consists of:
  1. One subscriber file 
        - Receives and handles events propagated by the mediator Object ( or rarely directly from other components)
  2. One firer file 
        - Propagates the event and all paremeters needed to the Mediator Object ( or rarely directly to other components)
        For example following up with the example above, the frontSubmission sub component is responsible for 
        firing the studyNameChanged event, as can been seen here:         https://github.com/smallAreaHealthStatisticsUnit/rapidInquiryFacility/blob/master/rifWebPlatform/web/dashboards/diseaseSubmission/js/v2/components/menu/firers/firer.frontSubmission.js 
  3. One event file
        - Takes care of events originating from the GUI for the specific unit 
          ( apart from map events which are captured inside the renderer object)   
        - The Event file has access to the Firer object, so when something is captured the correspoing firer/propagator 
          method is called to notify the Mediator  
  4. One unit file (or renderer ) which renders data and has access to the DOM elements of the specific unit          
  5. One Controller which access the request file to the web service and pass data to the renderer
  6. A dom object entry having the same name of the subcomponent in the DOM.js file
        - Following up again from the previous example the frontSubmission sub component part of the Menu' s component have its own
          list of DOM elememts under dom.menu.frontSubmission in the file: https://github.com/smallAreaHealthStatisticsUnit/rapidInquiryFacility/blob/master/rifWebPlatform/web/dashboards/diseaseSubmission/js/v2/dom/dom.submission.js 
          

-- Add new Sub Component  
The 5 files above must along with the DOM object must exist for each new sub compent that needs to be added, each of them is initialized within the component local initializer file found at the root at the specific component's folder, for example take a look at: 
https://github.com/smallAreaHealthStatisticsUnit/rapidInquiryFacility/blob/master/rifWebPlatform/web/dashboards/diseaseSubmission/js/v2/components/menu/menu.diseaseSubmission.js 

To facilitate this process a commandline facility built using NODE.js has been produced to allow new subcomponents to be added to the app. The facility can be started by simplying clicking on the addUnit.bat (under windows) within the JSFrameworkUtilities folder.
The utility will ask you for a dashboard name, as of 01/06/2015 the dashboards available can either be diseaseMapping|diseaseSubmission|logIn next it will ask for compoent's name (map|menu|table|chart) and then finally the name of the new sub component to be added. Once done 5 new files will be added to the project, for example if we were to add the following new sub component:
    - Dashboard: diseaseSubmission
    - Componet: Map
    - Unit: choropleth
    
The following new 5 files will be added in the following location:
-components
   -map
      -controllers
         -controller.choropleth.js
      -events
         -event.choropleth.js  
      -firers
         -firer.choropleth.js  
      -units
         -unit.choropleth.js   
      -subscribers
         -subscriber.choropleth.js  
         
The dom.js file will have to be added manually, you will have to create a new object under dom.menu and call it choropleth, 
menu:{
   choropleth: function () {} 
}          

Once all five files have been created and dom entry added you can add the relevant script tags reference to the head of the htmlm document and start using the new sub component by adding it top the initialize file map's sub component list:
     map: {
        studyType: 'diseaseSubmission',
        layerType: 'tilesvg',
        maps: ['studyArea', 'comparisonArea', 'choropleth' /* THE NEW ADDED SUB COMPONENT  */ ]
      }

