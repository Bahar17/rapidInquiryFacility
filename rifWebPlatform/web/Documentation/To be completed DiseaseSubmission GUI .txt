- RIF 4.0 Javascript GUI - To be completed	

	1. Retrieve study dialog
		   --- Implement as follows:
				   HTML/CSS has already been put in place. Javascript to be implemented within the "retrievableRunnable" unit part of the menu component.
				   The logic is as follows:
					 1. User click on "retrieve" study button on front menu, "Retrieve study" dialog appears (Already implemented)
					 2. Upon user click in point 1 retrieve all study ids and populate the #retrieveSelection dropdown list.
					 3. Add event handler for study id selection 
					 4. Add event handler for export file button, this should allow the download of the parameter's set up file ( preferably in XML as it might be easier to edit by users ) for the given study id selected in the dropdown.
				   The actual javascript implementation	should be as follows:
				     1. Add reference to html element  div#retrieveSelection in dom/dom.submission.js. Locate dom.menu.retrievableRunnable function in the dom.submission file,  add a new property to    
					    the object being return by the function called retrieveSelection and point it to element $('#retrieveSelection')
					 2. Add reference to html element  button#exportStudyParameters in dom/dom.submission.js. Locate dom.menu.retrievableRunnable function in the dom.submission file,   add a new 
					    property to the object being return by the function called exportButton and point it to element $('#exportStudyParameters')
					    object called retrieveSelection and point it to element $('#retrieveSelection')
					 3. Add event handler to capture export file button clicks, within the components/menu/events/event.retrievableRunnable.js file add the following method :
					      _dom.exportButton.click(function () {});
					 4. Add new a event in initialize.js as follows:
						 exportButtonClicked: {
							subscribers: ["mediator"],
							firer: ["menu"],
							method: "exportButtonClicked"
						 }
					 5. Add method called exportButtonClicked to "retrievableRunnable" firer found in components/menu/firers/firer.retrievableRunnable.js, this allows propagation to mediator:
						  exportButtonClicked: function (arg) {
						    this.fire("exportButtonClicked", arg);
						  }

					 6. Implement function's body in point 3, you will need to get the study id and pass it to the method implemented in point 5:
						  _dom.exportButton.click(function () {
						     var val = $(this).val();
							 firer.exportButtonClicked(val);
						  });
					 7. Add method called exportButtonClicked to mediator.subscriber.js found under mediator's folder. Implementation of method is left for you to fill.
					      exportButtonClicked: function (arg) {
						    //Call to retrieve study parameter's file web service, which as of the day of this documentation being written is not yet implemented. 
						  },
					 8. As per point 6 add and implement a request method in the request.js file which allow to retrieve a file parameter's set up given a study id for parameter. It should be something 
					    similar to, the following is for guidance only you will have to change the name of the web service:
						  // myCallback can be a function displaying a message of succesful file download. Middleware should be forced to return a file.
						  getStudyParametersFile: function (myCallback, params) { 
							var msg = "Retrieving study submission parameters file";
							xhr('getStudyParametersFile?', myCallback, msg, 'application/json');
						  }
						  
	2. Run from file study dialog
		 HTML/CSS has already been put in place. Javascript to be implemented within the "retrievableRunnable" unit part of the menu component.
					 
		   