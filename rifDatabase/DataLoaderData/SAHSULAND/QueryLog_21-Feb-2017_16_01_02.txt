==========================================================
QUERY NAME:deleteDataSetConfiguration
PARAMETERS:

SQL QUERY TEXT
DELETE FROM data_set_configurations 
WHERE 
   core_data_set_name=? AND 
   version=?;


==========================================================
==========================================================
QUERY NAME:create_extract_table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE extract_sahsuland_pop ( 
   year VARCHAR,
   sex VARCHAR,
   age VARCHAR,
   level1 VARCHAR,
   level2 VARCHAR,
   level3 VARCHAR,
   level4 VARCHAR,
   total VARCHAR);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createCleaningSearchReplaceTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_srch_sahsuland_pop;

CREATE TABLE cln_srch_sahsuland_pop AS  
SELECT 
   data_set_id,
   row_number,
   year AS year,
   CASE 
      WHEN sex ~ '^female|FEMALE$' THEN '2' 
      WHEN sex ~ '^male|MALE$' THEN '1' 
      WHEN sex ~ '^hermaphrodite|HERMAPHRODITE$' THEN '5' 
      WHEN sex ~ '^unknown|UNKNOWN$' THEN '6' 
      WHEN sex ~ '^[fF]$' THEN '2' 
      WHEN sex ~ '^[mM]$' THEN '1' 
      WHEN sex ~ '^[hH]$' THEN '5' 
      WHEN sex ~ '^[uU]$' THEN '6' 
      ELSE sex 
   END AS sex,
   clean_age(age) AS age,
   level1 AS SAHSU_GRD_LEVEL1,
   level2 AS SAHSU_GRD_LEVEL2,
   level3 AS SAHSU_GRD_LEVEL3,
   level4 AS SAHSU_GRD_LEVEL4,
   total AS total
FROM 
   extract_sahsuland_pop;

ALTER TABLE cln_srch_sahsuland_pop ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningValidationTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_val_sahsuland_pop;


CREATE TABLE cln_val_sahsuland_pop AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ~ '^(19|20)\d{2}$' THEN year 
      WHEN year ='' THEN year -- allow blank values 
      ELSE 'rif_error' 
   END AS year,
   CASE 
      WHEN sex ~ '[1|2|3|5|6]' THEN sex 
      WHEN sex ='' THEN sex -- allow blank values 
      ELSE 'rif_error' 
   END AS sex,
   CASE 
      WHEN is_valid_age(age) THEN age 
      ELSE 'rif_error' 
   END AS age,
   SAHSU_GRD_LEVEL1,
   SAHSU_GRD_LEVEL2,
   SAHSU_GRD_LEVEL3,
   SAHSU_GRD_LEVEL4,
   CASE 
      WHEN is_valid_integer(total) THEN total 
      ELSE 'rif_error' 
   END AS total
FROM 
   cln_srch_sahsuland_pop;

ALTER TABLE cln_val_sahsuland_pop ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningCastingTable
 -- CAST VALIDATED DATA TO APPROPRIATE DATA TYPES.
 -- ============================================================
 -- By now, the original data have been loaded and changed through any applicable cleaning rules.
 -- The table holding the cleaned validated data is used to cast data from
 -- text values to other data types.  Field values which contain blanks or are marked
 -- as "rif errors" are cast as null values in the table containing casted results.
DROP TABLE IF EXISTS cln_cast_sahsuland_pop;


CREATE TABLE cln_cast_sahsuland_pop AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ='' THEN NULL  
      WHEN year = 'rif_error' THEN NULL 
      ELSE cast(year AS INTEGER) 
    END AS year,
   CASE 
      WHEN sex ='' THEN NULL  
      WHEN sex = 'rif_error' THEN NULL 
      ELSE cast(sex AS INTEGER) 
    END AS sex,
   CASE 
      WHEN age ='' THEN NULL  
      WHEN age = 'rif_error' THEN NULL 
      ELSE cast(age AS INTEGER) 
    END AS age,
   CASE 
      WHEN SAHSU_GRD_LEVEL1 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL1 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL1 
    END AS SAHSU_GRD_LEVEL1,
   CASE 
      WHEN SAHSU_GRD_LEVEL2 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL2 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL2 
    END AS SAHSU_GRD_LEVEL2,
   CASE 
      WHEN SAHSU_GRD_LEVEL3 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL3 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL3 
    END AS SAHSU_GRD_LEVEL3,
   CASE 
      WHEN SAHSU_GRD_LEVEL4 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL4 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL4 
    END AS SAHSU_GRD_LEVEL4,
   CASE 
      WHEN total ='' THEN NULL  
      WHEN total = 'rif_error' THEN NULL 
      ELSE cast(total AS INTEGER) 
    END AS total
FROM 
   cln_val_sahsuland_pop;
;

ALTER TABLE cln_cast_sahsuland_pop ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:change_audit_manager audit changes
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_chg_sahsuland_pop AS 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'year' AS field_name,
   extract_sahsuland_pop.year AS old_value,
   cln_srch_sahsuland_pop.year AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.year != cln_srch_sahsuland_pop.year


UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'sex' AS field_name,
   extract_sahsuland_pop.sex AS old_value,
   cln_srch_sahsuland_pop.sex AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.sex != cln_srch_sahsuland_pop.sex


UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'age' AS field_name,
   extract_sahsuland_pop.age AS old_value,
   cln_srch_sahsuland_pop.age AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.age != cln_srch_sahsuland_pop.age


UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL1' AS field_name,
   extract_sahsuland_pop.level1 AS old_value,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL1 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.level1 != cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL1


UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL2' AS field_name,
   extract_sahsuland_pop.level2 AS old_value,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL2 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.level2 != cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL2


UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL3' AS field_name,
   extract_sahsuland_pop.level3 AS old_value,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL3 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.level3 != cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL3


UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL4' AS field_name,
   extract_sahsuland_pop.level4 AS old_value,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL4 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.level4 != cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL4


UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'total' AS field_name,
   extract_sahsuland_pop.total AS old_value,
   cln_srch_sahsuland_pop.total AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_pop,
   cln_srch_sahsuland_pop 
WHERE 
   extract_sahsuland_pop.data_set_id=cln_srch_sahsuland_pop.data_set_id AND 
   extract_sahsuland_pop.row_number=cln_srch_sahsuland_pop.row_number AND 
   extract_sahsuland_pop.total != cln_srch_sahsuland_pop.total

;




==========================================================
==========================================================
QUERY NAME:add to validation table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_val_sahsuland_pop AS 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'year' AS field_name,
   cln_srch_sahsuland_pop.year AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.year='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'sex' AS field_name,
   cln_srch_sahsuland_pop.sex AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.sex='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'age' AS field_name,
   cln_srch_sahsuland_pop.age AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.age='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL1' AS field_name,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL1 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.SAHSU_GRD_LEVEL1='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL2' AS field_name,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL2 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.SAHSU_GRD_LEVEL2='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL3' AS field_name,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL3 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.SAHSU_GRD_LEVEL3='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'SAHSU_GRD_LEVEL4' AS field_name,
   cln_srch_sahsuland_pop.SAHSU_GRD_LEVEL4 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.SAHSU_GRD_LEVEL4='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_pop.data_set_id,
   cln_srch_sahsuland_pop.row_number,
   'total' AS field_name,
   cln_srch_sahsuland_pop.total AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_pop,
   cln_val_sahsuland_pop 
WHERE 
   cln_srch_sahsuland_pop.data_set_id=cln_val_sahsuland_pop.data_set_id AND 
   cln_srch_sahsuland_pop.row_number=cln_val_sahsuland_pop.row_number AND 
   cln_val_sahsuland_pop.total='rif_error'

;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:convert_configuration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE convert_sahsuland_pop AS 
   SELECT 
      data_set_id,
      row_number,
      year,
      sex,
      age,
      SAHSU_GRD_LEVEL1,
      SAHSU_GRD_LEVEL2,
      SAHSU_GRD_LEVEL3,
      SAHSU_GRD_LEVEL4,
      total,
      convert_age_sex(age,sex) AS age_sex_group 
FROM 
   clean_sahsuland_pop;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_pop"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_pop_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_pop"
	2:"total"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_pop_total;;


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_pop"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_pop_year 
ON 
   optimise_sahsuland_pop (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_pop"
	2:"total"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_pop_total 
ON 
   optimise_sahsuland_pop (total);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_pop"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_pop_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_pop"
	2:"total"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_pop_total;;


==========================================================
==========================================================
QUERY NAME:checkConfiguration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE check_sahsuland_pop 
AS 
WITH duplicate_rows AS 
   (SELECT 
      data_set_id,
      row_number,
      row_number() OVER 
         (PARTITION BY 
            year,
            total,
            age_sex_group
         ORDER BY 
            year,
            total,
            age_sex_group) AS duplicate_number, 
      year, 
      SAHSU_GRD_LEVEL1, 
      SAHSU_GRD_LEVEL2, 
      SAHSU_GRD_LEVEL3, 
      SAHSU_GRD_LEVEL4, 
      total, 
      age_sex_group 
   FROM 
      optimise_sahsuland_pop) 
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN duplicate_number=1 THEN 'Y' 
      ELSE 'N' 
   END AS keep_record, 
   year, 
   SAHSU_GRD_LEVEL1, 
   SAHSU_GRD_LEVEL2, 
   SAHSU_GRD_LEVEL3, 
   SAHSU_GRD_LEVEL4, 
   total, 
   age_sex_group 
FROM 
   duplicate_rows;


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.row_number IS 'Row number of this record as it appears in the original imported data set.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.data_set_id IS 'Identifier of data set, which is found in the table data_set_configurations.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.age_sex_group IS 'A combination of age and sex group that is expressed as a single value.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.keep_record IS 'Determines if record should be kept Y or N.  Records marked N are considered duplicates.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.year IS 'year field';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.SAHSU_GRD_LEVEL1 IS '';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.SAHSU_GRD_LEVEL2 IS '';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.SAHSU_GRD_LEVEL3 IS 'level 3 resolution field';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.SAHSU_GRD_LEVEL4 IS 'level 4 resolution';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_pop.total IS 'total field';


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_pop"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_pop_year 
ON 
   check_sahsuland_pop (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_pop"
	2:"total"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_pop_total 
ON 
   check_sahsuland_pop (total);


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_sahsuland_pop AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM         check_sahsuland_pop),
   summary AS 
      (SELECT 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_pop), 
   tmp_year_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_pop 
      WHERE 
         year IS NULL), 
   tmp_total_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_pop 
      WHERE 
         total IS NULL), 
   tmp_age_sex_group_empty AS  
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_pop 
      WHERE 
         age_sex_group = -1)
   SELECT 
      id AS data_set_id,
      tmp_year_empty.total_empty_rows AS year_total,
      (tmp_year_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS year_percent,
      tmp_total_empty.total_empty_rows AS total_total,
      (tmp_total_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS total_percent,
      tmp_age_sex_group_empty.total_empty_rows AS age_sex_group_total,
      (tmp_age_sex_group_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS age_sex_group_total_percent,
      summary.total_rows AS total_rows
   FROM 
      identifiers,
      summary,
      tmp_year_empty,
      tmp_total_empty,
      tmp_age_sex_group_empty;


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_yr_sahsuland_pop AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM 
         check_sahsuland_pop),
   summary AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_pop
      GROUP BY 
         year), 
   tmp_total_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_pop 
      WHERE 
         total IS NULL
      GROUP BY 
         year), 
   tmp_age_sex_group_empty_yr AS  
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_pop 
      WHERE 
         age_sex_group = -1
      GROUP BY 
         year)
   SELECT 
      id AS data_set_id,
      summary.year,
      COALESCE(tmp_total_empty_yr.total_empty_rows, 0) AS total_total,
      (COALESCE(tmp_total_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS total_percent,
      COALESCE(tmp_age_sex_group_empty_yr.total_empty_rows, 0) AS age_sex_group_total,
      (COALESCE(tmp_age_sex_group_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS age_sex_group_percent,
      COALESCE(summary.total_rows, 0) AS total_rows 
   FROM 
      identifiers,
      summary
         LEFT JOIN tmp_total_empty_yr ON summary.year=tmp_total_empty_yr.year
         LEFT JOIN tmp_age_sex_group_empty_yr ON summary.year=tmp_age_sex_group_empty_yr.year
   ORDER BY 
      summary.year 
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createPublishedTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE pop_sahsuland_pop AS 
   SELECT
      year,
      age_sex_group,
      SAHSU_GRD_LEVEL1,
      SAHSU_GRD_LEVEL2,
      SAHSU_GRD_LEVEL3,
      SAHSU_GRD_LEVEL4,
      total

   FROM 
      check_sahsuland_pop
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
Successfully finished processing data set sahsuland_pop-1.0.
==========================================================
QUERY NAME:deleteDataSetConfiguration
PARAMETERS:

SQL QUERY TEXT
DELETE FROM data_set_configurations 
WHERE 
   core_data_set_name=? AND 
   version=?;


==========================================================
==========================================================
QUERY NAME:create_extract_table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE extract_sahsuland_cancer ( 
   year VARCHAR,
   sex VARCHAR,
   age VARCHAR,
   level1 VARCHAR,
   level2 VARCHAR,
   level3 VARCHAR,
   level4 VARCHAR,
   icd VARCHAR,
   total VARCHAR);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createCleaningSearchReplaceTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_srch_sahsuland_cancer;

CREATE TABLE cln_srch_sahsuland_cancer AS  
SELECT 
   data_set_id,
   row_number,
   year AS year,
   CASE 
      WHEN sex ~ '^female|FEMALE$' THEN '2' 
      WHEN sex ~ '^male|MALE$' THEN '1' 
      WHEN sex ~ '^hermaphrodite|HERMAPHRODITE$' THEN '5' 
      WHEN sex ~ '^unknown|UNKNOWN$' THEN '6' 
      WHEN sex ~ '^[fF]$' THEN '2' 
      WHEN sex ~ '^[mM]$' THEN '1' 
      WHEN sex ~ '^[hH]$' THEN '5' 
      WHEN sex ~ '^[uU]$' THEN '6' 
      ELSE sex 
   END AS sex,
   clean_age(age) AS age,
   level1 AS SAHSU_GRD_LEVEL1,
   level2 AS SAHSU_GRD_LEVEL2,
   level3 AS SAHSU_GRD_LEVEL3,
   level4 AS SAHSU_GRD_LEVEL4,
   icd AS icd,
   total AS total
FROM 
   extract_sahsuland_cancer;

ALTER TABLE cln_srch_sahsuland_cancer ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningValidationTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_val_sahsuland_cancer;


CREATE TABLE cln_val_sahsuland_cancer AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ~ '^(19|20)\d{2}$' THEN year 
      WHEN year ='' THEN year -- allow blank values 
      ELSE 'rif_error' 
   END AS year,
   CASE 
      WHEN sex ~ '[1|2|3|5|6]' THEN sex 
      WHEN sex ='' THEN sex -- allow blank values 
      ELSE 'rif_error' 
   END AS sex,
   CASE 
      WHEN is_valid_age(age) THEN age 
      ELSE 'rif_error' 
   END AS age,
   SAHSU_GRD_LEVEL1,
   SAHSU_GRD_LEVEL2,
   SAHSU_GRD_LEVEL3,
   SAHSU_GRD_LEVEL4,
   icd,
   CASE 
      WHEN is_valid_integer(total) THEN total 
      ELSE 'rif_error' 
   END AS total
FROM 
   cln_srch_sahsuland_cancer;

ALTER TABLE cln_val_sahsuland_cancer ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningCastingTable
 -- CAST VALIDATED DATA TO APPROPRIATE DATA TYPES.
 -- ============================================================
 -- By now, the original data have been loaded and changed through any applicable cleaning rules.
 -- The table holding the cleaned validated data is used to cast data from
 -- text values to other data types.  Field values which contain blanks or are marked
 -- as "rif errors" are cast as null values in the table containing casted results.
DROP TABLE IF EXISTS cln_cast_sahsuland_cancer;


CREATE TABLE cln_cast_sahsuland_cancer AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ='' THEN NULL  
      WHEN year = 'rif_error' THEN NULL 
      ELSE cast(year AS INTEGER) 
    END AS year,
   CASE 
      WHEN sex ='' THEN NULL  
      WHEN sex = 'rif_error' THEN NULL 
      ELSE cast(sex AS INTEGER) 
    END AS sex,
   CASE 
      WHEN age ='' THEN NULL  
      WHEN age = 'rif_error' THEN NULL 
      ELSE cast(age AS INTEGER) 
    END AS age,
   CASE 
      WHEN SAHSU_GRD_LEVEL1 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL1 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL1 
    END AS SAHSU_GRD_LEVEL1,
   CASE 
      WHEN SAHSU_GRD_LEVEL2 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL2 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL2 
    END AS SAHSU_GRD_LEVEL2,
   CASE 
      WHEN SAHSU_GRD_LEVEL3 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL3 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL3 
    END AS SAHSU_GRD_LEVEL3,
   CASE 
      WHEN SAHSU_GRD_LEVEL4 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL4 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL4 
    END AS SAHSU_GRD_LEVEL4,
   CASE 
      WHEN icd ='' THEN NULL  
      WHEN icd = 'rif_error' THEN NULL 
      ELSE icd 
    END AS icd,
   CASE 
      WHEN total ='' THEN NULL  
      WHEN total = 'rif_error' THEN NULL 
      ELSE cast(total AS INTEGER) 
    END AS total
FROM 
   cln_val_sahsuland_cancer;
;

ALTER TABLE cln_cast_sahsuland_cancer ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:change_audit_manager audit changes
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_chg_sahsuland_cancer AS 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'year' AS field_name,
   extract_sahsuland_cancer.year AS old_value,
   cln_srch_sahsuland_cancer.year AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.year != cln_srch_sahsuland_cancer.year


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'sex' AS field_name,
   extract_sahsuland_cancer.sex AS old_value,
   cln_srch_sahsuland_cancer.sex AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.sex != cln_srch_sahsuland_cancer.sex


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'age' AS field_name,
   extract_sahsuland_cancer.age AS old_value,
   cln_srch_sahsuland_cancer.age AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.age != cln_srch_sahsuland_cancer.age


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL1' AS field_name,
   extract_sahsuland_cancer.level1 AS old_value,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL1 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.level1 != cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL1


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL2' AS field_name,
   extract_sahsuland_cancer.level2 AS old_value,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL2 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.level2 != cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL2


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL3' AS field_name,
   extract_sahsuland_cancer.level3 AS old_value,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL3 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.level3 != cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL3


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL4' AS field_name,
   extract_sahsuland_cancer.level4 AS old_value,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL4 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.level4 != cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL4


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'icd' AS field_name,
   extract_sahsuland_cancer.icd AS old_value,
   cln_srch_sahsuland_cancer.icd AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.icd != cln_srch_sahsuland_cancer.icd


UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'total' AS field_name,
   extract_sahsuland_cancer.total AS old_value,
   cln_srch_sahsuland_cancer.total AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_cancer,
   cln_srch_sahsuland_cancer 
WHERE 
   extract_sahsuland_cancer.data_set_id=cln_srch_sahsuland_cancer.data_set_id AND 
   extract_sahsuland_cancer.row_number=cln_srch_sahsuland_cancer.row_number AND 
   extract_sahsuland_cancer.total != cln_srch_sahsuland_cancer.total

;




==========================================================
==========================================================
QUERY NAME:add to validation table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_val_sahsuland_cancer AS 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'year' AS field_name,
   cln_srch_sahsuland_cancer.year AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.year='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'sex' AS field_name,
   cln_srch_sahsuland_cancer.sex AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.sex='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'age' AS field_name,
   cln_srch_sahsuland_cancer.age AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.age='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL1' AS field_name,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL1 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.SAHSU_GRD_LEVEL1='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL2' AS field_name,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL2 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.SAHSU_GRD_LEVEL2='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL3' AS field_name,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL3 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.SAHSU_GRD_LEVEL3='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'SAHSU_GRD_LEVEL4' AS field_name,
   cln_srch_sahsuland_cancer.SAHSU_GRD_LEVEL4 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.SAHSU_GRD_LEVEL4='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'icd' AS field_name,
   cln_srch_sahsuland_cancer.icd AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.icd='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_cancer.data_set_id,
   cln_srch_sahsuland_cancer.row_number,
   'total' AS field_name,
   cln_srch_sahsuland_cancer.total AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_cancer,
   cln_val_sahsuland_cancer 
WHERE 
   cln_srch_sahsuland_cancer.data_set_id=cln_val_sahsuland_cancer.data_set_id AND 
   cln_srch_sahsuland_cancer.row_number=cln_val_sahsuland_cancer.row_number AND 
   cln_val_sahsuland_cancer.total='rif_error'

;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:convert_configuration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE convert_sahsuland_cancer AS 
   SELECT 
      data_set_id,
      row_number,
      year,
      sex,
      age,
      SAHSU_GRD_LEVEL1,
      SAHSU_GRD_LEVEL2,
      SAHSU_GRD_LEVEL3,
      SAHSU_GRD_LEVEL4,
      icd,
      total,
      convert_age_sex(age,sex) AS age_sex_group 
FROM 
   clean_sahsuland_cancer;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_cancer_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL1"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL1;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL2"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL2;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL3;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL4;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"icd"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_cancer_icd;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"total"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_cancer_total;;


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_cancer_year 
ON 
   optimise_sahsuland_cancer (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL1"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL1 
ON 
   optimise_sahsuland_cancer (SAHSU_GRD_LEVEL1);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL2"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL2 
ON 
   optimise_sahsuland_cancer (SAHSU_GRD_LEVEL2);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL3 
ON 
   optimise_sahsuland_cancer (SAHSU_GRD_LEVEL3);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_cancer_SAHSU_GRD_LEVEL4 
ON 
   optimise_sahsuland_cancer (SAHSU_GRD_LEVEL4);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"icd"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_cancer_icd 
ON 
   optimise_sahsuland_cancer (icd);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_cancer"
	2:"total"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_cancer_total 
ON 
   optimise_sahsuland_cancer (total);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_cancer_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL1"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL1;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL2"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL2;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL3;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL4;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"icd"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_cancer_icd;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"total"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_cancer_total;;


==========================================================
==========================================================
QUERY NAME:checkConfiguration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE check_sahsuland_cancer 
AS 
WITH duplicate_rows AS 
   (SELECT 
      data_set_id,
      row_number,
      row_number() OVER 
         (PARTITION BY 
            year,
            SAHSU_GRD_LEVEL3,
            SAHSU_GRD_LEVEL4,
            icd,
            total,
            age_sex_group
         ORDER BY 
            year,
            SAHSU_GRD_LEVEL3,
            SAHSU_GRD_LEVEL4,
            icd,
            total,
            age_sex_group) AS duplicate_number, 
      year, 
      SAHSU_GRD_LEVEL1, 
      SAHSU_GRD_LEVEL2, 
      SAHSU_GRD_LEVEL3, 
      SAHSU_GRD_LEVEL4, 
      icd, 
      total, 
      age_sex_group 
   FROM 
      optimise_sahsuland_cancer) 
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN duplicate_number=1 THEN 'Y' 
      ELSE 'N' 
   END AS keep_record, 
   year, 
   SAHSU_GRD_LEVEL1, 
   SAHSU_GRD_LEVEL2, 
   SAHSU_GRD_LEVEL3, 
   SAHSU_GRD_LEVEL4, 
   icd, 
   total, 
   age_sex_group 
FROM 
   duplicate_rows;


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.row_number IS 'Row number of this record as it appears in the original imported data set.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.data_set_id IS 'Identifier of data set, which is found in the table data_set_configurations.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.age_sex_group IS 'A combination of age and sex group that is expressed as a single value.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.keep_record IS 'Determines if record should be kept Y or N.  Records marked N are considered duplicates.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.year IS '';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.SAHSU_GRD_LEVEL1 IS 'level one field resolution';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.SAHSU_GRD_LEVEL2 IS 'level 2 field resolution';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.SAHSU_GRD_LEVEL3 IS 'level 3 resolution field';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.SAHSU_GRD_LEVEL4 IS 'level four resolution level';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.icd IS 'icd code';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_cancer.total IS 'total field';


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_cancer_year 
ON 
   check_sahsuland_cancer (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL1"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL1 
ON 
   check_sahsuland_cancer (SAHSU_GRD_LEVEL1);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL2"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL2 
ON 
   check_sahsuland_cancer (SAHSU_GRD_LEVEL2);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL3 
ON 
   check_sahsuland_cancer (SAHSU_GRD_LEVEL3);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_cancer_SAHSU_GRD_LEVEL4 
ON 
   check_sahsuland_cancer (SAHSU_GRD_LEVEL4);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"icd"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_cancer_icd 
ON 
   check_sahsuland_cancer (icd);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_cancer"
	2:"total"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_cancer_total 
ON 
   check_sahsuland_cancer (total);


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_sahsuland_cancer AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM         check_sahsuland_cancer),
   summary AS 
      (SELECT 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_cancer), 
   tmp_year_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         year IS NULL), 
   tmp_SAHSU_GRD_LEVEL1_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL1 IS NULL), 
   tmp_SAHSU_GRD_LEVEL2_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL2 IS NULL), 
   tmp_SAHSU_GRD_LEVEL3_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL3 IS NULL), 
   tmp_SAHSU_GRD_LEVEL4_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL4 IS NULL), 
   tmp_icd_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         icd IS NULL), 
   tmp_total_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         total IS NULL), 
   tmp_age_sex_group_empty AS  
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         age_sex_group = -1)
   SELECT 
      id AS data_set_id,
      tmp_year_empty.total_empty_rows AS year_total,
      (tmp_year_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS year_percent,
      tmp_SAHSU_GRD_LEVEL1_empty.total_empty_rows AS SAHSU_GRD_LEVEL1_total,
      (tmp_SAHSU_GRD_LEVEL1_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS SAHSU_GRD_LEVEL1_percent,
      tmp_SAHSU_GRD_LEVEL2_empty.total_empty_rows AS SAHSU_GRD_LEVEL2_total,
      (tmp_SAHSU_GRD_LEVEL2_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS SAHSU_GRD_LEVEL2_percent,
      tmp_SAHSU_GRD_LEVEL3_empty.total_empty_rows AS SAHSU_GRD_LEVEL3_total,
      (tmp_SAHSU_GRD_LEVEL3_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS SAHSU_GRD_LEVEL3_percent,
      tmp_SAHSU_GRD_LEVEL4_empty.total_empty_rows AS SAHSU_GRD_LEVEL4_total,
      (tmp_SAHSU_GRD_LEVEL4_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS SAHSU_GRD_LEVEL4_percent,
      tmp_icd_empty.total_empty_rows AS icd_total,
      (tmp_icd_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS icd_percent,
      tmp_total_empty.total_empty_rows AS total_total,
      (tmp_total_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS total_percent,
      tmp_age_sex_group_empty.total_empty_rows AS age_sex_group_total,
      (tmp_age_sex_group_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS age_sex_group_total_percent,
      summary.total_rows AS total_rows
   FROM 
      identifiers,
      summary,
      tmp_year_empty,
      tmp_SAHSU_GRD_LEVEL1_empty,
      tmp_SAHSU_GRD_LEVEL2_empty,
      tmp_SAHSU_GRD_LEVEL3_empty,
      tmp_SAHSU_GRD_LEVEL4_empty,
      tmp_icd_empty,
      tmp_total_empty,
      tmp_age_sex_group_empty;


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_yr_sahsuland_cancer AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM 
         check_sahsuland_cancer),
   summary AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_cancer
      GROUP BY 
         year), 
   tmp_SAHSU_GRD_LEVEL1_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL1 IS NULL
      GROUP BY 
         year), 
   tmp_SAHSU_GRD_LEVEL2_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL2 IS NULL
      GROUP BY 
         year), 
   tmp_SAHSU_GRD_LEVEL3_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL3 IS NULL
      GROUP BY 
         year), 
   tmp_SAHSU_GRD_LEVEL4_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         SAHSU_GRD_LEVEL4 IS NULL
      GROUP BY 
         year), 
   tmp_icd_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         icd IS NULL
      GROUP BY 
         year), 
   tmp_total_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         total IS NULL
      GROUP BY 
         year), 
   tmp_age_sex_group_empty_yr AS  
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_cancer 
      WHERE 
         age_sex_group = -1
      GROUP BY 
         year)
   SELECT 
      id AS data_set_id,
      summary.year,
      COALESCE(tmp_SAHSU_GRD_LEVEL1_empty_yr.total_empty_rows, 0) AS SAHSU_GRD_LEVEL1_total,
      (COALESCE(tmp_SAHSU_GRD_LEVEL1_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS SAHSU_GRD_LEVEL1_percent,
      COALESCE(tmp_SAHSU_GRD_LEVEL2_empty_yr.total_empty_rows, 0) AS SAHSU_GRD_LEVEL2_total,
      (COALESCE(tmp_SAHSU_GRD_LEVEL2_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS SAHSU_GRD_LEVEL2_percent,
      COALESCE(tmp_SAHSU_GRD_LEVEL3_empty_yr.total_empty_rows, 0) AS SAHSU_GRD_LEVEL3_total,
      (COALESCE(tmp_SAHSU_GRD_LEVEL3_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS SAHSU_GRD_LEVEL3_percent,
      COALESCE(tmp_SAHSU_GRD_LEVEL4_empty_yr.total_empty_rows, 0) AS SAHSU_GRD_LEVEL4_total,
      (COALESCE(tmp_SAHSU_GRD_LEVEL4_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS SAHSU_GRD_LEVEL4_percent,
      COALESCE(tmp_icd_empty_yr.total_empty_rows, 0) AS icd_total,
      (COALESCE(tmp_icd_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS icd_percent,
      COALESCE(tmp_total_empty_yr.total_empty_rows, 0) AS total_total,
      (COALESCE(tmp_total_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS total_percent,
      COALESCE(tmp_age_sex_group_empty_yr.total_empty_rows, 0) AS age_sex_group_total,
      (COALESCE(tmp_age_sex_group_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS age_sex_group_percent,
      COALESCE(summary.total_rows, 0) AS total_rows 
   FROM 
      identifiers,
      summary
         LEFT JOIN tmp_SAHSU_GRD_LEVEL1_empty_yr ON summary.year=tmp_SAHSU_GRD_LEVEL1_empty_yr.year
         LEFT JOIN tmp_SAHSU_GRD_LEVEL2_empty_yr ON summary.year=tmp_SAHSU_GRD_LEVEL2_empty_yr.year
         LEFT JOIN tmp_SAHSU_GRD_LEVEL3_empty_yr ON summary.year=tmp_SAHSU_GRD_LEVEL3_empty_yr.year
         LEFT JOIN tmp_SAHSU_GRD_LEVEL4_empty_yr ON summary.year=tmp_SAHSU_GRD_LEVEL4_empty_yr.year
         LEFT JOIN tmp_icd_empty_yr ON summary.year=tmp_icd_empty_yr.year
         LEFT JOIN tmp_total_empty_yr ON summary.year=tmp_total_empty_yr.year
         LEFT JOIN tmp_age_sex_group_empty_yr ON summary.year=tmp_age_sex_group_empty_yr.year
   ORDER BY 
      summary.year 
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createPublishedTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE num_sahsuland_cancer AS 
   SELECT
      year,
      age_sex_group,
      SAHSU_GRD_LEVEL1,
      SAHSU_GRD_LEVEL2,
      SAHSU_GRD_LEVEL3,
      SAHSU_GRD_LEVEL4,
      icd,
      total

   FROM 
      check_sahsuland_cancer
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
Successfully finished processing data set sahsuland_cancer-1.0.
==========================================================
QUERY NAME:deleteDataSetConfiguration
PARAMETERS:

SQL QUERY TEXT
DELETE FROM data_set_configurations 
WHERE 
   core_data_set_name=? AND 
   version=?;


==========================================================
==========================================================
QUERY NAME:create_extract_table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE extract_sahsuland_covariates3 ( 
   year VARCHAR,
   level3 VARCHAR,
   ses VARCHAR,
   ethnicity VARCHAR);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createCleaningSearchReplaceTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_srch_sahsuland_covariates3;

CREATE TABLE cln_srch_sahsuland_covariates3 AS  
SELECT 
   data_set_id,
   row_number,
   year AS year,
   level3 AS SAHSU_GRD_LEVEL3,
   ses AS ses,
   ethnicity AS ethnicity
FROM 
   extract_sahsuland_covariates3;

ALTER TABLE cln_srch_sahsuland_covariates3 ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningValidationTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_val_sahsuland_covariates3;


CREATE TABLE cln_val_sahsuland_covariates3 AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ~ '^(19|20)\d{2}$' THEN year 
      WHEN year ='' THEN year -- allow blank values 
      ELSE 'rif_error' 
   END AS year,
   SAHSU_GRD_LEVEL3,
   CASE 
      WHEN is_valid_integer(ses) THEN ses 
      ELSE 'rif_error' 
   END AS ses,
   CASE 
      WHEN is_valid_integer(ethnicity) THEN ethnicity 
      ELSE 'rif_error' 
   END AS ethnicity
FROM 
   cln_srch_sahsuland_covariates3;

ALTER TABLE cln_val_sahsuland_covariates3 ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningCastingTable
 -- CAST VALIDATED DATA TO APPROPRIATE DATA TYPES.
 -- ============================================================
 -- By now, the original data have been loaded and changed through any applicable cleaning rules.
 -- The table holding the cleaned validated data is used to cast data from
 -- text values to other data types.  Field values which contain blanks or are marked
 -- as "rif errors" are cast as null values in the table containing casted results.
DROP TABLE IF EXISTS cln_cast_sahsuland_covariates3;


CREATE TABLE cln_cast_sahsuland_covariates3 AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ='' THEN NULL  
      WHEN year = 'rif_error' THEN NULL 
      ELSE cast(year AS INTEGER) 
    END AS year,
   CASE 
      WHEN SAHSU_GRD_LEVEL3 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL3 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL3 
    END AS SAHSU_GRD_LEVEL3,
   CASE 
      WHEN ses ='' THEN NULL  
      WHEN ses = 'rif_error' THEN NULL 
      ELSE cast(ses AS INTEGER) 
    END AS ses,
   CASE 
      WHEN ethnicity ='' THEN NULL  
      WHEN ethnicity = 'rif_error' THEN NULL 
      ELSE cast(ethnicity AS INTEGER) 
    END AS ethnicity
FROM 
   cln_val_sahsuland_covariates3;
;

ALTER TABLE cln_cast_sahsuland_covariates3 ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:change_audit_manager audit changes
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_chg_sahsuland_covariates3 AS 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'year' AS field_name,
   extract_sahsuland_covariates3.year AS old_value,
   cln_srch_sahsuland_covariates3.year AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates3,
   cln_srch_sahsuland_covariates3 
WHERE 
   extract_sahsuland_covariates3.data_set_id=cln_srch_sahsuland_covariates3.data_set_id AND 
   extract_sahsuland_covariates3.row_number=cln_srch_sahsuland_covariates3.row_number AND 
   extract_sahsuland_covariates3.year != cln_srch_sahsuland_covariates3.year


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'SAHSU_GRD_LEVEL3' AS field_name,
   extract_sahsuland_covariates3.level3 AS old_value,
   cln_srch_sahsuland_covariates3.SAHSU_GRD_LEVEL3 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates3,
   cln_srch_sahsuland_covariates3 
WHERE 
   extract_sahsuland_covariates3.data_set_id=cln_srch_sahsuland_covariates3.data_set_id AND 
   extract_sahsuland_covariates3.row_number=cln_srch_sahsuland_covariates3.row_number AND 
   extract_sahsuland_covariates3.level3 != cln_srch_sahsuland_covariates3.SAHSU_GRD_LEVEL3


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'ses' AS field_name,
   extract_sahsuland_covariates3.ses AS old_value,
   cln_srch_sahsuland_covariates3.ses AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates3,
   cln_srch_sahsuland_covariates3 
WHERE 
   extract_sahsuland_covariates3.data_set_id=cln_srch_sahsuland_covariates3.data_set_id AND 
   extract_sahsuland_covariates3.row_number=cln_srch_sahsuland_covariates3.row_number AND 
   extract_sahsuland_covariates3.ses != cln_srch_sahsuland_covariates3.ses


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'ethnicity' AS field_name,
   extract_sahsuland_covariates3.ethnicity AS old_value,
   cln_srch_sahsuland_covariates3.ethnicity AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates3,
   cln_srch_sahsuland_covariates3 
WHERE 
   extract_sahsuland_covariates3.data_set_id=cln_srch_sahsuland_covariates3.data_set_id AND 
   extract_sahsuland_covariates3.row_number=cln_srch_sahsuland_covariates3.row_number AND 
   extract_sahsuland_covariates3.ethnicity != cln_srch_sahsuland_covariates3.ethnicity

;




==========================================================
==========================================================
QUERY NAME:add to validation table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_val_sahsuland_covariates3 AS 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'year' AS field_name,
   cln_srch_sahsuland_covariates3.year AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates3,
   cln_val_sahsuland_covariates3 
WHERE 
   cln_srch_sahsuland_covariates3.data_set_id=cln_val_sahsuland_covariates3.data_set_id AND 
   cln_srch_sahsuland_covariates3.row_number=cln_val_sahsuland_covariates3.row_number AND 
   cln_val_sahsuland_covariates3.year='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'SAHSU_GRD_LEVEL3' AS field_name,
   cln_srch_sahsuland_covariates3.SAHSU_GRD_LEVEL3 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates3,
   cln_val_sahsuland_covariates3 
WHERE 
   cln_srch_sahsuland_covariates3.data_set_id=cln_val_sahsuland_covariates3.data_set_id AND 
   cln_srch_sahsuland_covariates3.row_number=cln_val_sahsuland_covariates3.row_number AND 
   cln_val_sahsuland_covariates3.SAHSU_GRD_LEVEL3='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'ses' AS field_name,
   cln_srch_sahsuland_covariates3.ses AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates3,
   cln_val_sahsuland_covariates3 
WHERE 
   cln_srch_sahsuland_covariates3.data_set_id=cln_val_sahsuland_covariates3.data_set_id AND 
   cln_srch_sahsuland_covariates3.row_number=cln_val_sahsuland_covariates3.row_number AND 
   cln_val_sahsuland_covariates3.ses='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates3.data_set_id,
   cln_srch_sahsuland_covariates3.row_number,
   'ethnicity' AS field_name,
   cln_srch_sahsuland_covariates3.ethnicity AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates3,
   cln_val_sahsuland_covariates3 
WHERE 
   cln_srch_sahsuland_covariates3.data_set_id=cln_val_sahsuland_covariates3.data_set_id AND 
   cln_srch_sahsuland_covariates3.row_number=cln_val_sahsuland_covariates3.row_number AND 
   cln_val_sahsuland_covariates3.ethnicity='rif_error'

;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:convert_configuration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE convert_sahsuland_covariates3 AS 
   SELECT 
      data_set_id,
      row_number,
      year,
      SAHSU_GRD_LEVEL3,
      ses,
      ethnicity 
FROM 
   clean_sahsuland_covariates3;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates3_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates3_SAHSU_GRD_LEVEL3;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"ses"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates3_ses;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"ethnicity"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates3_ethnicity;;


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates3_year 
ON 
   optimise_sahsuland_covariates3 (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates3_SAHSU_GRD_LEVEL3 
ON 
   optimise_sahsuland_covariates3 (SAHSU_GRD_LEVEL3);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"ses"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates3_ses 
ON 
   optimise_sahsuland_covariates3 (ses);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates3"
	2:"ethnicity"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates3_ethnicity 
ON 
   optimise_sahsuland_covariates3 (ethnicity);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates3_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates3_SAHSU_GRD_LEVEL3;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"ses"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates3_ses;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"ethnicity"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates3_ethnicity;;


==========================================================
==========================================================
QUERY NAME:checkConfiguration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE check_sahsuland_covariates3 
AS 
WITH duplicate_rows AS 
   (SELECT 
      data_set_id,
      row_number,
      row_number() OVER 
         (PARTITION BY 
            year,
            SAHSU_GRD_LEVEL3,
            ses,
            ethnicity
         ORDER BY 
            year,
            SAHSU_GRD_LEVEL3,
            ses,
            ethnicity) AS duplicate_number, 
      year, 
      SAHSU_GRD_LEVEL3, 
      ses, 
      ethnicity 
   FROM 
      optimise_sahsuland_covariates3) 
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN duplicate_number=1 THEN 'Y' 
      ELSE 'N' 
   END AS keep_record, 
   year, 
   SAHSU_GRD_LEVEL3, 
   ses, 
   ethnicity 
FROM 
   duplicate_rows;


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates3.row_number IS 'Row number of this record as it appears in the original imported data set.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates3.data_set_id IS 'Identifier of data set, which is found in the table data_set_configurations.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates3.keep_record IS 'Determines if record should be kept Y or N.  Records marked N are considered duplicates.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates3.year IS 'year field value';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates3.SAHSU_GRD_LEVEL3 IS 'geographical resolution field level 3';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates3.ses IS 'socio economic status';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates3.ethnicity IS 'ethnicity';


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates3_year 
ON 
   check_sahsuland_covariates3 (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"SAHSU_GRD_LEVEL3"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates3_SAHSU_GRD_LEVEL3 
ON 
   check_sahsuland_covariates3 (SAHSU_GRD_LEVEL3);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"ses"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates3_ses 
ON 
   check_sahsuland_covariates3 (ses);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates3"
	2:"ethnicity"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates3_ethnicity 
ON 
   check_sahsuland_covariates3 (ethnicity);


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_sahsuland_covariates3 AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM         check_sahsuland_covariates3),
   summary AS 
      (SELECT 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_covariates3), 
   tmp_year_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates3 
      WHERE 
         year IS NULL), 
   tmp_SAHSU_GRD_LEVEL3_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates3 
      WHERE 
         SAHSU_GRD_LEVEL3 IS NULL), 
   tmp_ses_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates3 
      WHERE 
         ses IS NULL), 
   tmp_ethnicity_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates3 
      WHERE 
         ethnicity IS NULL)
   SELECT 
      id AS data_set_id,
      tmp_year_empty.total_empty_rows AS year_total,
      (tmp_year_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS year_percent,
      tmp_SAHSU_GRD_LEVEL3_empty.total_empty_rows AS SAHSU_GRD_LEVEL3_total,
      (tmp_SAHSU_GRD_LEVEL3_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS SAHSU_GRD_LEVEL3_percent,
      tmp_ses_empty.total_empty_rows AS ses_total,
      (tmp_ses_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS ses_percent,
      tmp_ethnicity_empty.total_empty_rows AS ethnicity_total,
      (tmp_ethnicity_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS ethnicity_percent,
      summary.total_rows AS total_rows
   FROM 
      identifiers,
      summary,
      tmp_year_empty,
      tmp_SAHSU_GRD_LEVEL3_empty,
      tmp_ses_empty,
      tmp_ethnicity_empty;


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_yr_sahsuland_covariates3 AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM 
         check_sahsuland_covariates3),
   summary AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_covariates3
      GROUP BY 
         year), 
   tmp_SAHSU_GRD_LEVEL3_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates3 
      WHERE 
         SAHSU_GRD_LEVEL3 IS NULL
      GROUP BY 
         year), 
   tmp_ses_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates3 
      WHERE 
         ses IS NULL
      GROUP BY 
         year), 
   tmp_ethnicity_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates3 
      WHERE 
         ethnicity IS NULL
      GROUP BY 
         year)
   SELECT 
      id AS data_set_id,
      summary.year,
      COALESCE(tmp_SAHSU_GRD_LEVEL3_empty_yr.total_empty_rows, 0) AS SAHSU_GRD_LEVEL3_total,
      (COALESCE(tmp_SAHSU_GRD_LEVEL3_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS SAHSU_GRD_LEVEL3_percent,
      COALESCE(tmp_ses_empty_yr.total_empty_rows, 0) AS ses_total,
      (COALESCE(tmp_ses_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS ses_percent,
      COALESCE(tmp_ethnicity_empty_yr.total_empty_rows, 0) AS ethnicity_total,
      (COALESCE(tmp_ethnicity_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS ethnicity_percent,
      COALESCE(summary.total_rows, 0) AS total_rows 
   FROM 
      identifiers,
      summary
         LEFT JOIN tmp_SAHSU_GRD_LEVEL3_empty_yr ON summary.year=tmp_SAHSU_GRD_LEVEL3_empty_yr.year
         LEFT JOIN tmp_ses_empty_yr ON summary.year=tmp_ses_empty_yr.year
         LEFT JOIN tmp_ethnicity_empty_yr ON summary.year=tmp_ethnicity_empty_yr.year
   ORDER BY 
      summary.year 
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createPublishedTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE covar_sahsuland_covariates3 AS 
   SELECT
      year,
      SAHSU_GRD_LEVEL3,
      ses,
      ethnicity

   FROM 
      check_sahsuland_covariates3
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
Successfully finished processing data set sahsuland_covariates3-1.0.
==========================================================
QUERY NAME:deleteDataSetConfiguration
PARAMETERS:

SQL QUERY TEXT
DELETE FROM data_set_configurations 
WHERE 
   core_data_set_name=? AND 
   version=?;


==========================================================
==========================================================
QUERY NAME:create_extract_table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE extract_sahsuland_covariates4 ( 
   year VARCHAR,
   level4 VARCHAR,
   ses VARCHAR,
   areatri1km VARCHAR,
   near_dist VARCHAR,
   tri_1km VARCHAR);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createCleaningSearchReplaceTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_srch_sahsuland_covariates4;

CREATE TABLE cln_srch_sahsuland_covariates4 AS  
SELECT 
   data_set_id,
   row_number,
   year AS year,
   level4 AS SAHSU_GRD_LEVEL4,
   ses AS ses,
   areatri1km AS areatri1km,
   near_dist AS near_dist,
   tri_1km AS tri_1km
FROM 
   extract_sahsuland_covariates4;

ALTER TABLE cln_srch_sahsuland_covariates4 ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningValidationTable
 -- VALIDATE THE CLEANED DATA.
 -- ============================================================
 -- After all the cleaning has been done, check whether the field values are valid.
DROP TABLE IF EXISTS cln_val_sahsuland_covariates4;


CREATE TABLE cln_val_sahsuland_covariates4 AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ~ '^(19|20)\d{2}$' THEN year 
      WHEN year ='' THEN year -- allow blank values 
      ELSE 'rif_error' 
   END AS year,
   SAHSU_GRD_LEVEL4,
   CASE 
      WHEN is_valid_integer(ses) THEN ses 
      ELSE 'rif_error' 
   END AS ses,
   CASE 
      WHEN is_valid_integer(areatri1km) THEN areatri1km 
      ELSE 'rif_error' 
   END AS areatri1km,
   CASE 
      WHEN is_valid_double(near_dist) THEN near_dist 
      ELSE 'rif_error' 
   END AS near_dist,
   CASE 
      WHEN is_valid_double(tri_1km) THEN tri_1km 
      ELSE 'rif_error' 
   END AS tri_1km
FROM 
   cln_srch_sahsuland_covariates4;

ALTER TABLE cln_val_sahsuland_covariates4 ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:createCleaningCastingTable
 -- CAST VALIDATED DATA TO APPROPRIATE DATA TYPES.
 -- ============================================================
 -- By now, the original data have been loaded and changed through any applicable cleaning rules.
 -- The table holding the cleaned validated data is used to cast data from
 -- text values to other data types.  Field values which contain blanks or are marked
 -- as "rif errors" are cast as null values in the table containing casted results.
DROP TABLE IF EXISTS cln_cast_sahsuland_covariates4;


CREATE TABLE cln_cast_sahsuland_covariates4 AS  
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN year ='' THEN NULL  
      WHEN year = 'rif_error' THEN NULL 
      ELSE cast(year AS INTEGER) 
    END AS year,
   CASE 
      WHEN SAHSU_GRD_LEVEL4 ='' THEN NULL  
      WHEN SAHSU_GRD_LEVEL4 = 'rif_error' THEN NULL 
      ELSE SAHSU_GRD_LEVEL4 
    END AS SAHSU_GRD_LEVEL4,
   CASE 
      WHEN ses ='' THEN NULL  
      WHEN ses = 'rif_error' THEN NULL 
      ELSE cast(ses AS INTEGER) 
    END AS ses,
   CASE 
      WHEN areatri1km ='' THEN NULL  
      WHEN areatri1km = 'rif_error' THEN NULL 
      ELSE cast(areatri1km AS INTEGER) 
    END AS areatri1km,
   CASE 
      WHEN near_dist ='' THEN NULL  
      WHEN near_dist = 'rif_error' THEN NULL 
      ELSE cast(near_dist AS DOUBLE PRECISION) 
    END AS near_dist,
   CASE 
      WHEN tri_1km ='' THEN NULL  
      WHEN tri_1km = 'rif_error' THEN NULL 
      ELSE cast(tri_1km AS DOUBLE PRECISION) 
    END AS tri_1km
FROM 
   cln_val_sahsuland_covariates4;
;

ALTER TABLE cln_cast_sahsuland_covariates4 ADD PRIMARY KEY (data_set_id, row_number);



==========================================================
QUERY NAME:change_audit_manager audit changes
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_chg_sahsuland_covariates4 AS 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'year' AS field_name,
   extract_sahsuland_covariates4.year AS old_value,
   cln_srch_sahsuland_covariates4.year AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates4,
   cln_srch_sahsuland_covariates4 
WHERE 
   extract_sahsuland_covariates4.data_set_id=cln_srch_sahsuland_covariates4.data_set_id AND 
   extract_sahsuland_covariates4.row_number=cln_srch_sahsuland_covariates4.row_number AND 
   extract_sahsuland_covariates4.year != cln_srch_sahsuland_covariates4.year


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'SAHSU_GRD_LEVEL4' AS field_name,
   extract_sahsuland_covariates4.level4 AS old_value,
   cln_srch_sahsuland_covariates4.SAHSU_GRD_LEVEL4 AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates4,
   cln_srch_sahsuland_covariates4 
WHERE 
   extract_sahsuland_covariates4.data_set_id=cln_srch_sahsuland_covariates4.data_set_id AND 
   extract_sahsuland_covariates4.row_number=cln_srch_sahsuland_covariates4.row_number AND 
   extract_sahsuland_covariates4.level4 != cln_srch_sahsuland_covariates4.SAHSU_GRD_LEVEL4


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'ses' AS field_name,
   extract_sahsuland_covariates4.ses AS old_value,
   cln_srch_sahsuland_covariates4.ses AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates4,
   cln_srch_sahsuland_covariates4 
WHERE 
   extract_sahsuland_covariates4.data_set_id=cln_srch_sahsuland_covariates4.data_set_id AND 
   extract_sahsuland_covariates4.row_number=cln_srch_sahsuland_covariates4.row_number AND 
   extract_sahsuland_covariates4.ses != cln_srch_sahsuland_covariates4.ses


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'areatri1km' AS field_name,
   extract_sahsuland_covariates4.areatri1km AS old_value,
   cln_srch_sahsuland_covariates4.areatri1km AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates4,
   cln_srch_sahsuland_covariates4 
WHERE 
   extract_sahsuland_covariates4.data_set_id=cln_srch_sahsuland_covariates4.data_set_id AND 
   extract_sahsuland_covariates4.row_number=cln_srch_sahsuland_covariates4.row_number AND 
   extract_sahsuland_covariates4.areatri1km != cln_srch_sahsuland_covariates4.areatri1km


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'near_dist' AS field_name,
   extract_sahsuland_covariates4.near_dist AS old_value,
   cln_srch_sahsuland_covariates4.near_dist AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates4,
   cln_srch_sahsuland_covariates4 
WHERE 
   extract_sahsuland_covariates4.data_set_id=cln_srch_sahsuland_covariates4.data_set_id AND 
   extract_sahsuland_covariates4.row_number=cln_srch_sahsuland_covariates4.row_number AND 
   extract_sahsuland_covariates4.near_dist != cln_srch_sahsuland_covariates4.near_dist


UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'tri_1km' AS field_name,
   extract_sahsuland_covariates4.tri_1km AS old_value,
   cln_srch_sahsuland_covariates4.tri_1km AS new_value,
   current_timestamp AS time_stamp 
FROM 
   extract_sahsuland_covariates4,
   cln_srch_sahsuland_covariates4 
WHERE 
   extract_sahsuland_covariates4.data_set_id=cln_srch_sahsuland_covariates4.data_set_id AND 
   extract_sahsuland_covariates4.row_number=cln_srch_sahsuland_covariates4.row_number AND 
   extract_sahsuland_covariates4.tri_1km != cln_srch_sahsuland_covariates4.tri_1km

;




==========================================================
==========================================================
QUERY NAME:add to validation table
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE aud_val_sahsuland_covariates4 AS 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'year' AS field_name,
   cln_srch_sahsuland_covariates4.year AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates4,
   cln_val_sahsuland_covariates4 
WHERE 
   cln_srch_sahsuland_covariates4.data_set_id=cln_val_sahsuland_covariates4.data_set_id AND 
   cln_srch_sahsuland_covariates4.row_number=cln_val_sahsuland_covariates4.row_number AND 
   cln_val_sahsuland_covariates4.year='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'SAHSU_GRD_LEVEL4' AS field_name,
   cln_srch_sahsuland_covariates4.SAHSU_GRD_LEVEL4 AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates4,
   cln_val_sahsuland_covariates4 
WHERE 
   cln_srch_sahsuland_covariates4.data_set_id=cln_val_sahsuland_covariates4.data_set_id AND 
   cln_srch_sahsuland_covariates4.row_number=cln_val_sahsuland_covariates4.row_number AND 
   cln_val_sahsuland_covariates4.SAHSU_GRD_LEVEL4='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'ses' AS field_name,
   cln_srch_sahsuland_covariates4.ses AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates4,
   cln_val_sahsuland_covariates4 
WHERE 
   cln_srch_sahsuland_covariates4.data_set_id=cln_val_sahsuland_covariates4.data_set_id AND 
   cln_srch_sahsuland_covariates4.row_number=cln_val_sahsuland_covariates4.row_number AND 
   cln_val_sahsuland_covariates4.ses='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'areatri1km' AS field_name,
   cln_srch_sahsuland_covariates4.areatri1km AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates4,
   cln_val_sahsuland_covariates4 
WHERE 
   cln_srch_sahsuland_covariates4.data_set_id=cln_val_sahsuland_covariates4.data_set_id AND 
   cln_srch_sahsuland_covariates4.row_number=cln_val_sahsuland_covariates4.row_number AND 
   cln_val_sahsuland_covariates4.areatri1km='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'near_dist' AS field_name,
   cln_srch_sahsuland_covariates4.near_dist AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates4,
   cln_val_sahsuland_covariates4 
WHERE 
   cln_srch_sahsuland_covariates4.data_set_id=cln_val_sahsuland_covariates4.data_set_id AND 
   cln_srch_sahsuland_covariates4.row_number=cln_val_sahsuland_covariates4.row_number AND 
   cln_val_sahsuland_covariates4.near_dist='rif_error'

 
UNION ALL 
SELECT 
   cln_srch_sahsuland_covariates4.data_set_id,
   cln_srch_sahsuland_covariates4.row_number,
   'tri_1km' AS field_name,
   cln_srch_sahsuland_covariates4.tri_1km AS invalid_field_value,
   current_timestamp AS time_stamp 
FROM 
   cln_srch_sahsuland_covariates4,
   cln_val_sahsuland_covariates4 
WHERE 
   cln_srch_sahsuland_covariates4.data_set_id=cln_val_sahsuland_covariates4.data_set_id AND 
   cln_srch_sahsuland_covariates4.row_number=cln_val_sahsuland_covariates4.row_number AND 
   cln_val_sahsuland_covariates4.tri_1km='rif_error'

;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:convert_configuration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE convert_sahsuland_covariates4 AS 
   SELECT 
      data_set_id,
      row_number,
      year,
      SAHSU_GRD_LEVEL4,
      ses,
      areatri1km,
      near_dist,
      tri_1km 
FROM 
   clean_sahsuland_covariates4;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates4_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates4_SAHSU_GRD_LEVEL4;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"ses"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates4_ses;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"areatri1km"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates4_areatri1km;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"near_dist"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates4_near_dist;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"tri_1km"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_optimise_sahsuland_covariates4_tri_1km;;


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates4_year 
ON 
   optimise_sahsuland_covariates4 (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates4_SAHSU_GRD_LEVEL4 
ON 
   optimise_sahsuland_covariates4 (SAHSU_GRD_LEVEL4);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"ses"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates4_ses 
ON 
   optimise_sahsuland_covariates4 (ses);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"areatri1km"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates4_areatri1km 
ON 
   optimise_sahsuland_covariates4 (areatri1km);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"near_dist"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates4_near_dist 
ON 
   optimise_sahsuland_covariates4 (near_dist);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"optimise_sahsuland_covariates4"
	2:"tri_1km"

SQL QUERY TEXT
CREATE INDEX 
   ind_optimise_sahsuland_covariates4_tri_1km 
ON 
   optimise_sahsuland_covariates4 (tri_1km);


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"year"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates4_year;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates4_SAHSU_GRD_LEVEL4;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"ses"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates4_ses;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"areatri1km"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates4_areatri1km;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"near_dist"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates4_near_dist;;


==========================================================
==========================================================
QUERY NAME:deleteIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"tri_1km"

SQL QUERY TEXT
DROP INDEX IF EXISTS 
   ind_check_sahsuland_covariates4_tri_1km;;


==========================================================
==========================================================
QUERY NAME:checkConfiguration
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE check_sahsuland_covariates4 
AS 
WITH duplicate_rows AS 
   (SELECT 
      data_set_id,
      row_number,
      row_number() OVER 
         (PARTITION BY 
            year,
            SAHSU_GRD_LEVEL4,
            ses,
            areatri1km,
            near_dist,
            tri_1km
         ORDER BY 
            year,
            SAHSU_GRD_LEVEL4,
            ses,
            areatri1km,
            near_dist,
            tri_1km) AS duplicate_number, 
      year, 
      SAHSU_GRD_LEVEL4, 
      ses, 
      areatri1km, 
      near_dist, 
      tri_1km 
   FROM 
      optimise_sahsuland_covariates4) 
SELECT 
   data_set_id,
   row_number,
   CASE 
      WHEN duplicate_number=1 THEN 'Y' 
      ELSE 'N' 
   END AS keep_record, 
   year, 
   SAHSU_GRD_LEVEL4, 
   ses, 
   areatri1km, 
   near_dist, 
   tri_1km 
FROM 
   duplicate_rows;


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.row_number IS 'Row number of this record as it appears in the original imported data set.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.data_set_id IS 'Identifier of data set, which is found in the table data_set_configurations.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.keep_record IS 'Determines if record should be kept Y or N.  Records marked N are considered duplicates.';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.year IS 'year field value';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.SAHSU_GRD_LEVEL4 IS 'level four covariate';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.ses IS 'socio economic status';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.areatri1km IS 'area tri 1 km';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.near_dist IS 'near distance';


==========================================================
==========================================================
QUERY NAME:addCommentToTableField
PARAMETERS:

SQL QUERY TEXT
COMMENT ON COLUMN check_sahsuland_covariates4.tri_1km IS 'tri 1 km';


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"year"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates4_year 
ON 
   check_sahsuland_covariates4 (year);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"SAHSU_GRD_LEVEL4"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates4_SAHSU_GRD_LEVEL4 
ON 
   check_sahsuland_covariates4 (SAHSU_GRD_LEVEL4);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"ses"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates4_ses 
ON 
   check_sahsuland_covariates4 (ses);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"areatri1km"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates4_areatri1km 
ON 
   check_sahsuland_covariates4 (areatri1km);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"near_dist"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates4_near_dist 
ON 
   check_sahsuland_covariates4 (near_dist);


==========================================================
==========================================================
QUERY NAME:createIndices
PARAMETERS:
	1:"check_sahsuland_covariates4"
	2:"tri_1km"

SQL QUERY TEXT
CREATE INDEX 
   ind_check_sahsuland_covariates4_tri_1km 
ON 
   check_sahsuland_covariates4 (tri_1km);


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_sahsuland_covariates4 AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM         check_sahsuland_covariates4),
   summary AS 
      (SELECT 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_covariates4), 
   tmp_year_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         year IS NULL), 
   tmp_SAHSU_GRD_LEVEL4_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         SAHSU_GRD_LEVEL4 IS NULL), 
   tmp_ses_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         ses IS NULL), 
   tmp_areatri1km_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         areatri1km IS NULL), 
   tmp_near_dist_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         near_dist IS NULL), 
   tmp_tri_1km_empty AS 
      (SELECT 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         tri_1km IS NULL)
   SELECT 
      id AS data_set_id,
      tmp_year_empty.total_empty_rows AS year_total,
      (tmp_year_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS year_percent,
      tmp_SAHSU_GRD_LEVEL4_empty.total_empty_rows AS SAHSU_GRD_LEVEL4_total,
      (tmp_SAHSU_GRD_LEVEL4_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS SAHSU_GRD_LEVEL4_percent,
      tmp_ses_empty.total_empty_rows AS ses_total,
      (tmp_ses_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS ses_percent,
      tmp_areatri1km_empty.total_empty_rows AS areatri1km_total,
      (tmp_areatri1km_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS areatri1km_percent,
      tmp_near_dist_empty.total_empty_rows AS near_dist_total,
      (tmp_near_dist_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS near_dist_percent,
      tmp_tri_1km_empty.total_empty_rows AS tri_1km_total,
      (tmp_tri_1km_empty.total_empty_rows::double precision / summary.total_rows :: double precision) * 100 AS tri_1km_percent,
      summary.total_rows AS total_rows
   FROM 
      identifiers,
      summary,
      tmp_year_empty,
      tmp_SAHSU_GRD_LEVEL4_empty,
      tmp_ses_empty,
      tmp_areatri1km_empty,
      tmp_near_dist_empty,
      tmp_tri_1km_empty;


==========================================================
==========================================================
QUERY NAME:createEmptyFieldCheckDataQualityTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE dq_empty_yr_sahsuland_covariates4 AS 
WITH 
   identifiers AS 
      (SELECT 
         DISTINCT(data_set_id) AS id 
      FROM 
         check_sahsuland_covariates4),
   summary AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_rows 
      FROM 
         check_sahsuland_covariates4
      GROUP BY 
         year), 
   tmp_SAHSU_GRD_LEVEL4_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         SAHSU_GRD_LEVEL4 IS NULL
      GROUP BY 
         year), 
   tmp_ses_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         ses IS NULL
      GROUP BY 
         year), 
   tmp_areatri1km_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         areatri1km IS NULL
      GROUP BY 
         year), 
   tmp_near_dist_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         near_dist IS NULL
      GROUP BY 
         year), 
   tmp_tri_1km_empty_yr AS 
      (SELECT 
         year, 
         COUNT(data_set_id) AS total_empty_rows 
      FROM 
         check_sahsuland_covariates4 
      WHERE 
         tri_1km IS NULL
      GROUP BY 
         year)
   SELECT 
      id AS data_set_id,
      summary.year,
      COALESCE(tmp_SAHSU_GRD_LEVEL4_empty_yr.total_empty_rows, 0) AS SAHSU_GRD_LEVEL4_total,
      (COALESCE(tmp_SAHSU_GRD_LEVEL4_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS SAHSU_GRD_LEVEL4_percent,
      COALESCE(tmp_ses_empty_yr.total_empty_rows, 0) AS ses_total,
      (COALESCE(tmp_ses_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS ses_percent,
      COALESCE(tmp_areatri1km_empty_yr.total_empty_rows, 0) AS areatri1km_total,
      (COALESCE(tmp_areatri1km_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS areatri1km_percent,
      COALESCE(tmp_near_dist_empty_yr.total_empty_rows, 0) AS near_dist_total,
      (COALESCE(tmp_near_dist_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS near_dist_percent,
      COALESCE(tmp_tri_1km_empty_yr.total_empty_rows, 0) AS tri_1km_total,
      (COALESCE(tmp_tri_1km_empty_yr.total_empty_rows, 0)::double precision / summary.total_rows::double precision) * 100 AS tri_1km_percent,
      COALESCE(summary.total_rows, 0) AS total_rows 
   FROM 
      identifiers,
      summary
         LEFT JOIN tmp_SAHSU_GRD_LEVEL4_empty_yr ON summary.year=tmp_SAHSU_GRD_LEVEL4_empty_yr.year
         LEFT JOIN tmp_ses_empty_yr ON summary.year=tmp_ses_empty_yr.year
         LEFT JOIN tmp_areatri1km_empty_yr ON summary.year=tmp_areatri1km_empty_yr.year
         LEFT JOIN tmp_near_dist_empty_yr ON summary.year=tmp_near_dist_empty_yr.year
         LEFT JOIN tmp_tri_1km_empty_yr ON summary.year=tmp_tri_1km_empty_yr.year
   ORDER BY 
      summary.year 
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
==========================================================
QUERY NAME:createPublishedTable
PARAMETERS:

SQL QUERY TEXT
CREATE TABLE covar_sahsuland_covariates4 AS 
   SELECT
      year,
      SAHSU_GRD_LEVEL4,
      ses,
      areatri1km,
      near_dist,
      tri_1km

   FROM 
      check_sahsuland_covariates4
;


==========================================================
==========================================================
QUERY NAME:update state
PARAMETERS:

SQL QUERY TEXT
UPDATE data_set_configurations 
SET current_workflow_state=? 
WHERE 
   core_data_set_name=?
;


==========================================================
Successfully finished processing data set sahsuland_covariates4-1.0.
